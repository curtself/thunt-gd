func find_matches_ff():
	var visited = []
	for i in width:
		visited.append([])
		for j in height:
			visited[i].append(false)

	var match_groups = []

	for i in width:
		for j in height:
			if not visited[i][j] and all_pieces[i][j] != null:
				var group = flood_fill(i, j, visited)
				if group.pieces.size() >= 3:
					group.determine_key_piece()
					group.mark_matches()
					match_groups.append(group)

	if match_groups.size() > 0:
		var matched_pieces = []
		for group in match_groups:
			matched_pieces += group.pieces

		var matched_size = get_unique(matched_pieces).size()
		if matched_size > max_match_size_in_turn:
			max_match_size_in_turn = matched_size

		if timing_mode == "timers":
			upgrade_and_destroy()
		else:
			print("manual trigger for upgrade/destroy");
			await get_tree().create_timer(common_timeout).timeout;
			upgrade_and_destroy()
	else:
		if timing_mode == "timers":
			get_parent().get_node("collapse_timer").start()
		else:
			print("manual trigger for collapse")
			await get_tree().create_timer(common_timeout).timeout;
			board_scan_reset()
			collapse_colums()

func find_matches_bk():
	var match_groups = []
	match_groups += check_horizontal_matches()
	match_groups += check_vertical_matches()
	#var match_groups = check_all_matches()
	var matched_pieces = []
	for group in match_groups:
		group.determine_key_piece()
		group.mark_matches()
		matched_pieces += group.pieces
		#print("Match group is: " + str(group));

	if match_groups.size() > 0:
		# dedupe the matched pieces to get a count for scoring
		var matched_size = get_unique(matched_pieces).size();
		print("Matched size is " + str(matched_size));
		# check for max match this turn
		if matched_size > max_match_size_in_turn:
			max_match_size_in_turn = matched_size;

		# we found match(es) so let's upgrade and nuke them
		upgrade_and_destroy();
	else:
		# no matches so we should collapse suspended pieces
		#print("Queue collapse timer to add " + str(board_size_max-board_size_current) + " pieces");
		get_parent().get_node("collapse_timer").start()

